#
# DeepThought: This package provides functions for multiplication and other computations in finitely generated nilpotent groups based on the Deep Thought algorithm.
#
# Declarations
#

#! @Description
#!   Insert documentation for you function here
DeclareGlobalFunction( "DTP_Example" );


#! @Description
#!	The exponent vector y such that y = x^{-1} z for the group elements 
#!	corresponding to the exponent vectors x and z. DTobj[4] = true, y 
#! describes a normal form.  
DeclareGlobalFunction( "DTP_SolveEquation" ); 

# Input: 	- exponent vectors x, z
#			- DTobj
# Output:	exponent vector y such that for the corresponding elements 
#			x * y = z. If DTobj[4] = true, y describes a normal form. 
DTP_SolveEquation := function(x, z, DTobj)


# QUICK HACK: declare some functions to resolve circular dependencies
# on the long run, clean this up
DeclareGlobalFunction( "DTP_AreAlmostEqual" );
DeclareGlobalFunction( "DTP_NormalForm" );
DeclareGlobalFunction( "DTP_Order" );

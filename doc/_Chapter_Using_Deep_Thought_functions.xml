<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Using_Deep_Thought_functions">
<Heading>Using Deep Thought functions</Heading>

In the following sections, functions provided for computing Deep Thought polynomials and using them for calculations are listed.
<Section Label="Chapter_Using_Deep_Thought_functions_Section_Computing_Deep_Though_polynomials">
<Heading>Computing Deep Though polynomials</Heading>

<ManSection>
  <Func Arg="coll" Name="DTP_DTapplicability" />
 <Returns>boolean
</Returns>
 <Description>
Checks the collector <C>coll</C> for applicability of Deep Thought functions. Note that depending on consistency some functions may be applicable, while others are not. Information on the applicability and which type of Deep Thought polynomials are suggested is printed to the terminal. Here, "+" means that the following property is fulfilled, otherwise there is a "-". The function returns <C>false</C> if Deep Thought is not applicable to the collector <C>coll</C> and <C>true</C> otherwise. Anyway, even if <C>true</C> is returned, <Emph>not all functions need to be applicable</Emph> (in case of inconsistenies).
 </Description>
</ManSection>


<ManSection>
  <Func Arg="coll, [, rs_flag]" Name="DTP_DTObjFromCollector" />
 <Returns>a DTObj
</Returns>
 <Description>
Computes a DTObj for the collector coll, either with polynomials of type <Math>f_{rs}</Math> (if <C>rs_flag = true</C>) or with polynomials of type <Math>f_r</Math>, otherwise. If the optional argument <C>rs_flag</C> is not provided, polynomials of type <Math>f_{rs}</Math> are computed. The function checks whether the collector <C>coll</C> is confluent. If not, a warning is displayed. Note that the functions assumes the collector <C>coll</C> to be suitable for Deep Thought, see function <C>DTP_DTapplicability</C>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Deep_Thought_functions_Section_Computations_with_Deep_Thought_polynomials">
<Heading>Computations with Deep Thought polynomials</Heading>

<ManSection>
  <Func Arg="expvec, int, DTObj" Name="DTP_Exp" />
 <Returns>an exponent vector
</Returns>
 <Description>
Computes the exponent vector of <C>expvec</C><Math>^{int}</Math>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result is in normal form.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec, DTObj" Name="DTP_Inverse" />
 <Returns>an exponent vector
</Returns>
 <Description>
Computes the exponent vector of the inverse of the element corresponding to <C>expvec</C>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result describes a normal form.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec, coll" Name="DTP_IsInNormalForm" />
 <Returns>boolean or positive integer
</Returns>
 <Description>
Checks whether <C>expvec</C> is in normal form or not. If yes, the return value is <C>true</C>. Otherwise the return value is the smallest generator index for which the normal form condition is violated, i.e. for which the relative order <C>RelativeOrder(coll)[i]</C> is non-zero, and <C>expvec[i]</C> &lt; <C>0</C> or <C>expvec[i]</C> <Math>\geq</Math> <C>RelativeOrder(coll)[i]</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec1, expvec2, DTObj" Name="DTP_Multiply" />
 <Returns>an exponent vector
</Returns>
 <Description>
Computes the exponent vector of the product <C>expvec1 * expvec2</C> using the Deep Thought polynomials. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result is returned in normal form.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec, DTObj" Name="DTP_NormalForm" />
 <Returns>an exponent vector
</Returns>
 <Description>
Computes the exponent vector of the normal form of <C>expvec</C>. For this function to be applicable, we need <C>DTObj![PC_DTPConfluent] = true</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec, DTObj" Name="DTP_Order" />
 <Returns>positive integer or infinity
</Returns>
 <Description>
Computes the order of the element described by <C>expvec</C>. For this function to be applicable, we need <C>DTObj![PC_DTPConfluent] = true</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="expvec1, expvec2, DTObj" Name="DTP_SolveEquation" />
 <Returns>an exponent vector
</Returns>
 <Description>
Computes the exponent vector of the element corresponding to <C>expvec1</C><Math>^{-1}</Math> <C>* expvec2</C>, i.e. the result solves the equation <C>expvec1 * result = expvec2</C>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result
describes a normal form.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Deep_Thought_functions_Section_Computations_with_pcp-elements">
<Heading>Computations with pcp-elements</Heading>

When Deep Thought polynomials are available, certain computations allow different approaches which may be faster than the methods used by default.
In this sections, computations for which such extra functions taking pcp-elements as input are available are listed. All of these functions need the collector belonging to the pcp-elements to be a <C>DTObj</C>.
<ManSection>
  <Func Arg="pcp-element, int" Name="DTP_PCP_Exp" />
 <Returns>pcp-element
</Returns>
 <Description>
Returns the pcp-element <C>pcp-element</C><Math>^{\text{int}}</Math>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result is in normal form.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="pcp-element" Name="DTP_PCP_Inverse" />
 <Returns>pcp-element
</Returns>
 <Description>
Returns the pcp-elment <C>pcp-element^-1</C>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result describes a normal form.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="pcp-element" Name="DTP_PCP_NormalForm" />
 <Returns>pcp-element
</Returns>
 <Description>
Returns a pcp-element which is the normal form of the input pcp-element. For this function to be applicable, we need <C>DTObj![PC_DTPConfluent] = true</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="pcp-element" Name="DTP_PCP_Order" />
 <Returns>positive integer or infinity
</Returns>
 <Description>
Computes the order of the pcp-element. For this function to be applicable, we need <C>DTObj![PC_DTPConfluent] = true</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="pcp-element1, pcp-element2" Name="DTP_PCP_SolveEquation" />
 <Returns>pcp-element
</Returns>
 <Description>
Returns the pcp-element <C>pcp-element1</C><Math>^{-1}</Math> <C>* pcp-element2</C>, i.e. the result solves the equation <C>pcp-element1 * pcp-element = pcp-element2</C>. If <C>DTObj![PC_DTPConfluent] = true</C>, then the result
describes a normal form.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Using_Deep_Thought_functions_Section_Accessing_Deep_Thought_polynomials">
<Heading>Accessing Deep Thought polynomials</Heading>

In this sections, functions which can be used to display the content of a <C>DTObj</C> are documented. Furthermore, Deep Thought polynomials stored in a <C>DTObj</C> can be converted to &GAP; polynomials.
<ManSection>
  <Func Arg="DTObj" Name="DTP_Display_DTObj" />
 <Returns>nothing
</Returns>
 <Description>
Prints information about <C>DTObj</C> to the terminal. In particular, the Deep Thought polynomials are printed in human-readable form. This function is also called by the method of Display for a DTObj.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="DTObj" Name="DTP_pols2GAPpols" />
 <Returns>list
</Returns>
 <Description>
Converts the Deep Thought polynomials stored in <C>DTObj[PC_DTPPolynomials]</C> to &GAP; polynomials and returns them in a list together with their polynomial ring.
 </Description>
</ManSection>


</Section>


</Chapter>


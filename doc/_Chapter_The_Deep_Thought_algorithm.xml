<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_The_Deep_Thought_algorithm">
<Heading>The Deep Thought algorithm</Heading>

Polycyclic and, especially, finitely generated nilpotent groups exhibit a rich structure allowing a special approach towards multiplication using polynomials. The so-called Deep Thought algorithm introduced by C. R. Leedham-Green and L. H. Soicher in "Symoblic Collection Using Deep Thought" (1998) computes these polynomials in practice for a suitable presentation of a finitely generated nilpotent group. Such a presentation is of the following form
<Display> \langle a_1, \ldots, a_n \mid a_i^{s_i} = a_{i+1}^{c_{i, i, i+1}} \cdots a_n^{c_{i, i, n}}, a_j a_i = a_i a_j a_{j+1}^{c_{i, j, j+1}} \ldots a_n^{c_{i, j, n}}, 1 \leq i &lt; j \leq n \rangle </Display>
with <Math>s_i \in \mathbb{N} \cup \{ \infty \}</Math> and <Math>c_{i, j, k} \in \mathbb{Z}</Math>. This presentation may or may not be consistent. However, if the presentation is not consistent, not all functions provided in this package are applicable, see function <C>DTP_DTapplicability</C>.
<P/>
Let <Math>G</Math> denote the group presented by the above presentation. Then every element in <Math>G</Math> can be written uniquely in a so-called normal form. That is, if <Math>G_i := \langle a_i, \ldots, a_n \rangle</Math> and <Math>r_i := | G_i : G_{i+1}|</Math>, <Math>1, \leq i \leq n</Math>, are the relative orders, then each element can be written as
<Display> a_1^{e_1} \cdots a_n^{e_n} </Display>
with <Math>0 \leq e_i &lt; r_i</Math> if <Math>r_i &lt; \infty</Math>.
<P/>
The Deep Thought algorithm computes rational polynomials <Math>f_1, \ldots, f_n</Math> in <Math>2n</Math> indeterminates such that if <Math> x := a_1^{x_1} \cdots a_n^{x_n} </Math> and <Math>y := a_1^{y_1} \cdots a_n^{y_n} </Math> are two elements in normal form, then the normal form of their product <Math>xy</Math> is given by
<Display>a_1^{f_1(x_1, \ldots, x_n, y_1, \ldots, y_n)} \cdots a_n^{f_n(x_1, \ldots, x_n, y_1, \ldots, y_n)}.</Display>
Moreover, there exists a second version of the Deep Thought algorithms which computes <Math>n^2</Math> polynomials <Math>f_{rs}</Math>, <Math>1 \leq r, s \leq n</Math>, suitable for multiplications of the form
<Display>(a_1^{x_1} \cdots a_n^{x_n}) \cdot a_s^{y_s} </Display>
for <Math>1 \leq s \leq n</Math>. Each general multiplication can be expressed using these special multiplications. Depending on the presentation, polynomials of one version may be more efficient for computations than the polynomials of the other version. For a suggestion on which polynomials to use for a given presentation, see the function <C>DTP_DTapplicability</C>. In the following, Deep Thought type <Math>f_r</Math> refers to the Deep Though algorithm which uses <Math>n</Math> polynomials and type <Math>f_{rs}</Math> refers to the Deep Thought algorithm using <Math>n^2</Math> polynomials.
<P/>
In order to work with the Deep Thought functions, the group presentation is expected to be given as a collector <C>coll</C>, as defined in the &GAP; package Polycyclic. Moreover, the Polycyclic package introduces the structure of exponent vectors <C>expvec</C>, which will be used also in this package to represent group elements.
In the following text, a group element <Math>a_1^{x_1} \cdots a_n^{x_n}</Math> is identified with its exponent vector in form of the list <C>[x_1, ..., x_n]</C>. For example, if <C>expvec1, expvec2</C> are exponent vectors of elements in the same group, than <C>expvec1 * expvec2</C> describes the multiplication of the corresponding group elements, and so on.
<P/>
This package uses lists with the name <C>DTobj</C> to store the Deep Though polynomials of a collector together with some additional information. That is, the functions <C>DTP_DTpols_r</C> and <C>DTP_DTpols_rs</C> return a list (<C>DTobj</C>) with four entries:
<List>
<Item> <C>DTobj[1]</C>: collector <C>coll</C> which was input of the function</Item>
<Item> <C>DTobj[2]</C>: Deep Thought polynomials in form of (nested) lists</Item>
<Item> <C>DTobj[3]</C>: list containing orders of group generators</Item>
<Item> <C>DTobj[4]</C>: boolean value indicating whether the collector is consistent or not</Item>
</List>
</Chapter>

